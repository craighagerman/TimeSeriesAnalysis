dfrm <- read.table(infile, header=F, sep="\t", col.names=c("name", "sum", "total", "avg"))
hist(dfrm$avg)
library(ggplot2)
ggp <- ggplot(dfrm$avg)
help(aes)
ggp <- ggplot(data.frame(dfrm$avg))
ggp <- ggp + geom_histogram(fill="lightgreen")
ggp + ggtitle("Avg Tweets Per Day")
library(ggplot2)
ggp <- ggplot(data.frame(dfrm$avg), aes(x=dfrm$avg))
ggp <- ggp + geom_histogram(fill="lightgreen")
ggp + ggtitle("Avg Tweets Per Day")
library(ggplot2)
ggp <- ggplot(data.frame(dfrm$avg), aes(x=dfrm$avg))
ggp <- ggp + geom_histogram(fill="lightgreen", binwidth=300)
ggp + ggtitle("Avg Tweets Per Day")
fsize_all = c(22, 42, 218)
fsize = c(22, 42)
btsize = (116, 319)
btsize = c(116, 319)
model <- lm(fsize - btsize)
model <- lm(fsize ~ btsize)
summary(model)
model = lm(formula = fsize ~ btsize, x = TRUE, y=TRUE)
model
plot(fsize, btsize)
abline(model)
model = lm(formula = btsize ~ fsize, x = TRUE, y=TRUE)
model
http://canadianoutages.com/status/vmedia
box <- boxplot( log(DEP_DELAY)~MONTH,data = chicago[chicago$DEP_DELAY > 0,],range=1.5,plot=TRUE,main="Put Title here")
lines(box$stats[3,])
dat<-read.table(text = "188.1 196.0 202.2 216.8 230.5")
dat<-t(dat)
bxp(list(stats=dat, n=rep(10, ncol(dat))))
bxp(list(stats=dat, n=rep(10, ncol(dat))) width=5)
bxp(list(stats=dat, n=rep(10, ncol(dat))), width=5)
bxp(list(stats=dat, n=rep(10, ncol(dat))), width=1)
bxp(list(stats=dat, n=rep(10, ncol(dat))))
bxp(list(stats=dat, n=rep(10, ncol(dat))), width=0.1)
bxp(list(stats=dat, n=rep(10, ncol(dat))), width=10)
bxp(list(stats=dat, n=rep(10, ncol(dat))))
boxplot(count ~ spray, data = InsectSprays, outline = FALSE, boxlty = 0,
whisklty = 0, staplelty = 0)
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
rowSums(x)
colSums(x)
K = 20
rep(1, 20)
rep(12,3,4,5)
rowSums(x)
rowSums(x) = rep(7,6,5,4,5,6,7,8)
rowSums(x) == rep(7,6,5,4,5,6,7,8)
rep(7, 6, 5, 4, 5, 6, 7, 8)
dim(UCBAdmissions)
rep(1, K)
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
A = matrix(
+   c(2, 4, 3, 1, 5, 7), # the data elements
+   nrow=2,              # number of rows
+   ncol=3,              # number of columns
+   byrow = TRUE)        # fill matrix by rows
A = matrix( c(2, 4, 3, 1, 5, 7), nrow=2, ncol=3, byrow = TRUE)
A
rowSum(A)
rowSums(A)
colSums(A)
A = matrix( c(2, 4, 3, 1, 5, 7, 1, 2, 3), nrow=3, ncol=3, byrow = TRUE)
A
A = matrix( c(0.1, 0.2, 0.7, 1, 5, 7, 1, 2, 3), nrow=3, ncol=3, byrow = TRUE)
rowSums(A)
A = matrix( c(0.1, 0.2, 0.7, .9, 0.05, 0.05, 0.4, 0.5, 0.1), nrow=3, ncol=3, byrow = TRUE)
rowSums(A)
rep(1, 3)
rowSums(A) == rep(1, 3)
K = 4
A = matrix( c(0.1, 0.2, 0.7, .9, 0.05, 0.05, 0.4, 0.5, 0.1, 0.3, 0.7, 0.0), nrow=4, ncol=3, byrow = TRUE)
rep(1, K)
K
rowSums(A) == rep(1, K)
all.equal(rowSums(A), rep(1, K), check.attributes = FALSE)
all.equal(rowSums(A), rep(1, K), check.attributes = TRUE)
A
data(AirPassengers)
describe(data)
data
ap <- data(AirPassengers)
ap
describe(ap)
summarize(ap)
summary(ap)
summary(AirPassengers)
class(AirPassengers)
start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
plot(ap)
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
cycle(AirPassengers)
plot(aggregate(AirPassengers, FUN=mean))
# plot(aggregate(AirPassengers, FUN=mean))
plot(AirPassengers)
cycle(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
boxplot(AirPassengers~cycle(AirPassengers))
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
acf(log(AirPassengers))
acf(diff(log(AirPassengers)))
log(AirPassengers)
diff(log(AirPassengers))
help(diff)
pacf(diff(log(AirPassengers)))
pacf(diff(log(AirPassengers)))
(fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12)))
(fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12)))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred$pred, log = "y", lty = c(1,3))
install.packages("astsa")
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/Rexploration/MACDApp")
library(shiny)
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/Rexploration/MACDApp")
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/Rexploration/MACDApp")
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/Rexploration/MACDApp")
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/Rexploration/MACDApp")
?sidebarLayout
?sidebarPanel
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/Rexploration/MACDApp")
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/Rexploration/timeseries")
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/Rexploration/timeseries")
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/Rexploration/timeseries")
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/Rexploration/timeseries")
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/Rexploration/timeseries")
?renderDataTable
?DT::renderDataTable
?DT::renderDataTable
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/Rexploration/timeseries")
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/Rexploration/timeseries")
cars
?dataTableOutput()
installed.packages("DT")
library(DT)
sessionInfor()
sessionInfo()
if (!require("DT")) install.packages('DT')
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/src/R/TimeSeriesAnalysis")
library(shiny)
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/src/R/TimeSeriesAnalysis")
macd_inter <- function() {
h <-  '<h2>Interpreting MACD</h2>'
interpretation1 <- '<p><b>Crossover</b> - When MACD falls below the signal line it is a bearish signal (sell). When MACD rises
above the signal line it is a bullish signal (buy)'
interpretation2 <- '<p><b>Divergence</b> - When the observation diverges from the MACD it signals the end
of the current trend.</p>'
interpretation3 <- '<p><b>Dramatic Rise</b> - When the MACD rises dramatically (i.e. the shorter MA
pulls away from the longer MA) it signals the security is overbought and will soon return to normal levels</p>'
interpretation4 <- '<p><b>Zero line movement</b> - When the MACD is above zero the short term average is above
the long term average, signalling upward momentum. (and vice versa) </p>'
return ( paste(h, interpretation1, interpretation2, interpretation3, interpretation4) )
}
macd_inter
print(macd_inter)
macd_inter <- '<h2>Interpreting MACD</h2>
<p><b>Crossover</b> - When MACD falls below the signal line it is a bearish signal (sell). When MACD rises
above the signal line it is a bullish signal (buy)
<p><b>Divergence</b> - When the observation diverges from the MACD it signals the end
of the current trend.</p>
<p><b>Dramatic Rise</b> - When the MACD rises dramatically (i.e. the shorter MA
pulls away from the longer MA) it signals the security is overbought and will soon return to normal levels</p>
<p><b>Zero line movement</b> - When the MACD is above zero the short term average is above
the long term average, signalling upward momentum. (and vice versa) </p>'
print(macd_inter)
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/src/R/TimeSeriesAnalysis")
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/src/R/TimeSeriesAnalysis")
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/src/R/TimeSeriesAnalysis")
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/src/R/TimeSeriesAnalysis")
shiny::runApp('Projects/TimeSeriesAnalysis/src/R/TimeSeriesAnalysis')
?SMA
library(TTR)
?SMA
a <- 4
a <- TRUE
b <- if(a) 4 else 6
b
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/src/R/TimeSeriesAnalysis")
library(shiny)
runApp("/Users/chagerman/Projects/TimeSeriesAnalysis/src/R/TimeSeriesAnalysis")
newsDateURL = paste(c('http://www.reuters.com/finance/stocks/companyNews?symbol=GOOG.O&date=',format(as.Date(dateValue,"%Y-%m-%d"),"%m%d%Y")),collapse="")
library(XML)
library(RCurl)
# Find the big deviations and find if there are related news and vice versa
# We will read data from the master source file of RICS
Tickers = read.csv('C:\\Anant\\MyLearning\\Statistics\\SpreadAnalysis\\WorldTickerList.csv')
# For now we will take the example of GOOGLE in that list
Tickers = Tickers[Tickers$TICKER=='GOOG',]
# We will use the Ticker value and download data from Yahoo Finance
# You can also customise the date ranges
URL = paste(c('http://real-chart.finance.yahoo.com/table.csv?s=',as.character(Tickers$TICKER),'&a=00&b=01&c=2015&d=08&e=30&f=2015&g=d&ignore=.csv'),collapse="")
GOOG = read.csv(URL)
URL = paste(c('http://real-chart.finance.yahoo.com/table.csv?s=', 'GOOG' ,'&a=00&b=01&c=2015&d=08&e=30&f=2015&g=d&ignore=.csv'),collapse="")
URL
GOOG = read.csv(URL)
GOOG
GOOG$OpenHighSpread = GOOG$High - GOOG$Open
GOOG$LowHighSpread = GOOG$High - GOOG$Low
GOOG$OpenHigh = (GOOG$OpenHighSpread - mean(GOOG$OpenHighSpread))/sd(GOOG$OpenHighSpread)
GOOG$LowHigh = (GOOG$LowHighSpread - mean(GOOG$LowHighSpread))/sd(GOOG$LowHighSpread)
MajorPoints = GOOG[GOOG$OpenHigh < -3 | GOOG$OpenHigh > 3,]
MajorPoints$Date
dateValue <- MajorPoints$Date[1]
dateValue
MajorPoints$Date
str(MajorPoints$Date)
dateValue <-  "2015-01-02"
newsDateURL = paste(c('http://www.reuters.com/finance/stocks/companyNews?symbol=GOOG.O&date=',format(as.Date(dateValue,"%Y-%m-%d"),"%m%d%Y")),collapse="")
newsDateURL
newsDateURL = paste(c('http://finance.yahoo.com/q/h?s=',as.character(Tickers$TICKER),'&t',as.character(dateValue)),collapse="")
newsDateURL = paste(c('http://finance.yahoo.com/q/h?s=', 'GOOG' ,'&t',as.character(dateValue)),collapse="")
newsDateURL
newsDateURL = paste(c('http://www.reuters.com/finance/stocks/companyNews?symbol=GOOG.O&date=',format(as.Date(dateValue,"%Y-%m-%d"),"%m%d%Y")),collapse="")
newsDateURL
# ----- LOAD SOME DATA -----
# SET UP PATHS
datadir <- "/Users/chagerman/Projects/TimeSeriesAnalysis/src/R/twitterData"
# READ IN DATA
isilen <- read.table(file.path(datadir, "isilKeywordSent_en2.txt"), header=TRUE)
isilar <- read.table(file.path(datadir, "isilKeywordSent_ar2.txt"), header=TRUE)
trumpdata <- read.table(file.path(datadir, "trumpSent2.tsv"), header=TRUE)
# convert string dates to R date objects
isilen$date <- as.Date(isilen$date)
isilar$date <- as.Date(isilar$date)
trumpdata$date <- as.Date(trumpdata$date)
# ----- LOAD EVENTS -----
eventdir <- "/Users/chagerman/Data/ISIL-related-events"
str(trumpdata)
str(trumpdata$netPct)
indata <- trumpdata
keeps <- c("date", "netPct")
df <- indata[keeps]
xt <- xts(df[,-1], order.by=df$date)
library(xts)
xt <- xts(df[,-1], order.by=df$date)
dygraph(xt)
library(dygraphs)
dygraph(xt)
events <- read.table(file.path(eventdir, "2015_events.tsv"), header=FALSE)
events <- read.table(file.path(eventdir, "2015_events.tsv"), header=TRUE)
events
read.table("/Users/chagerman/Data/ISIL-related-events/2015_events.tsv", header=TRUE)
setwd("/Users/chagerman/Data/ISIL-related-events")
read.table("2013_events.tsv")
?read.table
read.table("/Users/chagerman/Data/ISIL-related-events/2015_events.tsv", header=TRUE)
read.table("/Users/chagerman/Data/ISIL-related-events/2013_events.tsv", header=TRUE)
read.table("/Users/chagerman/Data/ISIL-related-events/2013_events.tsv", sep="\t", header=TRUE)
read.table("/Users/chagerman/Data/ISIL-related-events/2014_events.tsv", sep="\t", header=TRUE)
tmp <- read.table("2014_events.tsv", sep="\t", header=TRUE)
names(tmp)
tmp$date
tmp <- read.table("2015_events.tsv", sep="\t", header=TRUE)
tmp$date
tmp <- read.table("2016_events.tsv", sep="\t", header=TRUE)
tmp$date
tmp <- read.table("2013_events.tsv", sep="\t", header=TRUE)
tmp$date
events <- read.table(file.path(eventdir, "2015_events.tsv"), sep="\t", header=TRUE)
names(events)
events$date <- as.Date(events$date)
dygraphs(events)
dygraph(events)
xt$events <- events$event
™
events$event
xt$evnt <- events$event
names(xt)
df$evnt <- events$event
names(df)
events$date[4]
events
eventdf <- read.table(file.path(eventdir, "2015_events.tsv"), sep="\t", header=TRUE)
eventdf$date <- as.Date(eventdf$date)
indata <- trumpdata
keeps <- c("date", "netPct")
df <- indata[keeps]
eventdir <- "/Users/chagerman/Data/ISIL-related-events"
eventdf <- read.table(file.path(eventdir, "2015_events.tsv"), sep="\t", header=TRUE)
eventdf$date <- as.Date(eventdf$date)
newdf <- merge(df,eventdf,by="date",all.x=T)
names(newdf)
head(newdf, n=2)
head(newdf, n=1)
newdf[is.na(newdf)] <- 0
newdf
newdf[is.na(newdf)] <- ""
newdf <- merge(df,eventdf,by="date",all.x=T)
newdf
tail(newdf)
newdf$event[is.na(newdf$event)] <- ""
is.na(newddf)
is.na(newdf)
is.na(newdf$event)
newdf$event[is.na(newdf$event)]
newdf[is.na(newdf$event)]
newdf$event[is.na(newdf)]
newdf[is.na(newdf)]
newdf <- as.data.frame(merge(df,eventdf,by="date",all.x=T))
names(newdf)
str(newdf)
newdf$event <- sapply(newdf$event, as.character)
str(newdf)
newdf[is.na(newdf)] <- ""
tail(newdf)
dygraph(presidents, main = "Quarterly Presidential Approval Ratings") %>%
dyAxis("y", valueRange = c(0, 100)) %>%
dyAnnotation("1950-7-1", text = "A", tooltip = "Korea") %>%
dyAnnotation("1965-1-1", text = "B", tooltip = "Vietnam")
library(dygraphs)
dyG = dygraph(presidents, main = "Presidential Approval") %>%
dyAxis("y", valueRange = c(0, 100))
#  explore the legend route
dyG %>%
dyCallbacks(
highlightCallback = sprintf(
'function(e, x, pts, row) {
// added to illustrate what is happening
//   remove once satisfied with your code
debugger;
var customLegend = %s
// should get our htmlwidget
e.target.parentNode.parentNode
.querySelectorAll(".dygraph-legend")[0]
.innerText = customLegend[row] + row;
}'
,# supply a vector or text that you would like
jsonlite::toJSON(rep('something here',length(as.vector(presidents))))
)
)
dyG %>%
dyCallbacks(
highlightCallback = sprintf(
'function(e, x, pts, row) {
// added to illustrate what is happening
//   remove once satisfied with your code
debugger;
var customLegend = %s
// should get our htmlwidget
var legendel = e.target.parentNode.parentNode
.querySelectorAll(".dygraph-legend")[0];
// should get our htmlwidget
legendel.innerHTML = legendel.innerHTML + "<br>" + customLegend[row];
}'
,# supply a vector or text that you would like
jsonlite::toJSON(rep('something here',length(as.vector(presidents))))
)
)
?rep
presidents
as.vector(presidents)
dyG = dygraph(presidents, main = "Presidential Approval") %>%
dyAxis("y", valueRange = c(0, 100))
#  explore the legend route
dyG %>%
dyCallbacks(
highlightCallback = sprintf(
'function(e, x, pts, row) {
// added to illustrate what is happening
//   remove once satisfied with your code
debugger;
var customLegend = %s
// should get our htmlwidget
e.target.parentNode.parentNode
.querySelectorAll(".dygraph-legend")[0]
.innerText = customLegend[row] + row;
}'
,# supply a vector or text that you would like
jsonlite::toJSON(rep('something here',length(as.vector(presidents))))
)
)
length(as.vector(presidents))
annotations <- c("a", "aa", "aaa", "aaaa", "b", "bb", "bbb", "bbbb", "c", "cc", "ccc", "cccc", "d", "dd", "ddd", "dddd", "e", "ee", "eee", "eeee", "f", "ff", "fff", "ffff", "g", "gg", "ggg", "gggg", "h", "hh", "hhh", "hhhh", "i", "ii", "iii", "iiii", "j", "jj", "jjj", "jjjj", "k", "kk", "kkk", "kkkk", "l", "ll", "lll", "llll", "m", "mm", "mmm", "mmmm", "n", "nn", "nnn", "nnnn", "o", "oo", "ooo", "oooo", "p", "pp", "ppp", "pppp", "q", "qq", "qqq", "qqqq", "r", "rr", "rrr", "rrrr", "s", "ss", "sss", "ssss", "t", "tt", "ttt", "tttt", "u", "uu", "uuu", "uuuu", "v", "vv", "vvv", "vvvv", "w", "ww", "www", "wwww", "x", "xx", "xxx", "xxxx", "y", "yy", "yyy", "yyyy", "z", "zz", "zzz", "zzzz", "a", "aa", "aaa", "aaaa", "b", "bb", "bbb", "bbbb", "c", "cc", "ccc", "cccc", "d", "dd", "ddd", "dddd")
annotations
annotations[2]
dyG %>%
dyCallbacks(
highlightCallback = sprintf(
'function(e, x, pts, row) {
// added to illustrate what is happening
//   remove once satisfied with your code
// debugger;
var customLegend = %s
// should get our htmlwidget
var legendel = e.target.parentNode.parentNode
.querySelectorAll(".dygraph-legend")[0];
// should get our htmlwidget
legendel.innerHTML = legendel.innerHTML + "<br>" + customLegend[row];
}'
,# supply a vector or text that you would like
#jsonlite::toJSON(rep('something here',length(as.vector(presidents))))
jsonlite::toJSON( annotations )
)
)
xt <- xts(df[,-1], order.by=df$date)
dygraph(xt)
names(df)
annotations <- newdf$events
str(annotations)
annotations)åhead()
head(annotations)
newdf$events
str(newdf)
annotations <- newdf$event
head(annotations)
length(df)
length(newdf)
dim(df)
dim(newdf)
mydyG <- dygraph(xt)
mydyG %>%
dyCallbacks(
highlightCallback = sprintf(
'function(e, x, pts, row) {
// added to illustrate what is happening
//   remove once satisfied with your code
// debugger;
var customLegend = %s
// should get our htmlwidget
var legendel = e.target.parentNode.parentNode
.querySelectorAll(".dygraph-legend")[0];
// should get our htmlwidget
legendel.innerHTML = legendel.innerHTML + "<br>" + customLegend[row];
}'
,# supply a vector or text that you would like
#jsonlite::toJSON(rep('something here',length(as.vector(presidents))))
jsonlite::toJSON( annotations )
)
)
fnames <- c("2013_events.tsv", "2014_events.tsv", "2015_events.tsv", "2016_events.tsv")
for f in fnames {}
for (f in fnames) {print(f)}
for (f in fnames) {
print(f)
}
for (f in fnames) {
print(file.path(eventdir, f))
}
df1 <- read.table(file.path(eventdir, "2015_events.tsv"), sep="\t", header=TRUE)
df2 <- read.table(file.path(eventdir, "2016_events.tsv"), sep="\t", header=TRUE)
df1$date <- as.Date(df1$date)
df2$date <- as.Date(df2$date)
length(df1)
dim(df1)
dim(df2)
rbind(df1, df2)
dim(rbind(df1, df2))
dim(df1)
dim(df2)
109 + 37
dim(rbind(df1, df2))
indata <- read.table("/Users/chagerman/Projects/TimeSeriesAnalysis/src/R/expData/netPctData.tsv", sep="\t", header=TRUE)
evtdata <- read.table("/Users/chagerman/Projects/TimeSeriesAnalysis/src/R/expData/eventData.tsv", sep="\t", header=TRUE)
df1 <- read.table("/Users/chagerman/Projects/TimeSeriesAnalysis/src/R/expData/netPctData.tsv", sep="\t", header=TRUE)
df2 <- read.table("/Users/chagerman/Projects/TimeSeriesAnalysis/src/R/expData/eventData.tsv", sep="\t", header=TRUE)
df2
df1$date <- as.Date(df1$date)
df2$date <- as.Date(df2$date)
as.data.frame(merge(df1,df2,by="date",all.x=T))
?merge
as.data.frame(merge(df1,df2,by="date",all.x=F))
length(isilen)
dim(isilen)
dim(isilen)[1]
isilen <- as.data.frame(merge(eventdf, isilen, by="date", all.x=F))
dim(isilen)[1]
dim(eventdf)[1]
dim(eventdf)[1]
isilen <- read.table(file.path(datadir, "isilKeywordSent_en2.txt"), header=TRUE)
isilar <- read.table(file.path(datadir, "isilKeywordSent_ar2.txt"), header=TRUE)
trumpdata <- read.table(file.path(datadir, "trumpSent2.tsv"), header=TRUE)
# convert string dates to R date objects
isilen$date <- as.Date(isilen$date)
isilar$date <- as.Date(isilar$date)
trumpdata$date <- as.Date(trumpdata$date)
dim(isilen)
dim(eventdf)
?rbind
rbind(df1, df2))ålength()
ength(rbind(df1, df2))
length(rbind(df1, df2))
dim(rbind(df1, df2))
rbind(df1, df2)
eventdir <- "/Users/chagerman/Data/ISIL-related-events"
#fnames <- c("2013_events.tsv", "2014_events.tsv", "2015_events.tsv", "2016_events.tsv")
df1 <- read.table(file.path(eventdir, "2013_events.tsv"), sep="\t", header=TRUE)
df2 <- read.table(file.path(eventdir, "2014_events.tsv"), sep="\t", header=TRUE)
df3 <- read.table(file.path(eventdir, "2015_events.tsv"), sep="\t", header=TRUE)
df4 <- read.table(file.path(eventdir, "2016_events.tsv"), sep="\t", header=TRUE)
df1$date <- as.Date(df1$date)
df2$date <- as.Date(df2$date)
df3$date <- as.Date(df3$date)
df4$date <- as.Date(df4$date)
eventdf <- rbind(df1, df2, df3, df4)
dim(rbind(df1, df2))
dim(df2)
df2 <- read.table(file.path(eventdir, "2014_events.tsv"), sep="\t", header=TRUE)
dim(df2)
head(df2)
file.path(eventdir, "2014_events.tsv")
df22 <- read.table(file.path(eventdir, "2014_events.tsv"), sep="\t", header=TRUE)
df22
